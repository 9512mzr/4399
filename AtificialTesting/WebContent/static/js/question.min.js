/**
 * 试题篮
 *
 */
OT2.Basket = (function () {
    // 模板
    var template = _.template(OT2.Util.Template().get('basketList'));
    function Basket(el) { 
        if (!(this instanceof Basket)) return new Basket(el);
        OT2.Event.call(this);
        this.el = el || document.createElement('div');
        this.$el = $(this.el);
        this.$list = this.$el.find('.basket-count');
        this.isVisible = this.$el.hasClass('active');
        this.activeClass = 'active';
        this.model = [];  // 试题ID列表
        this.cacheObj = {}; // 试题属性映射, id -> 试题属性对象
        this.unserialize(); // 反序列化数据，获取初始数据
        this.render();
        this.bindEvent();
        this.wireIframe = OT2.Wireiframe(); // 生成试题移动动画线框
    }
    Basket.prototype = {
        // 隐藏，打开
        changeVisual: function () { 
            this.isVisible = !this.isVisible; 
            this.$el[ this.isVisible ? 'addClass' : 'removeClass'](this.activeClass);
        },
        bindEvent: function () {
            var that = this;
            this.$el.find('.basket-tit').on('click', function () {
                that.changeVisual();
            });
            that.subscribe('Question:add', function (question) {
                that.unserialize();
                if (_.contains(that.model, question.id)) return false; // 如果试题篮已存在该试题，则不存储
                
                that.model.push(question.id);
                var _orders = _.pluck(that.cacheObj, 'order');
                var max_order = _.size(_orders) ? Number(_.max(_orders)) : 0;
                // 存取试题相关数据
                that.cacheObj[question.id] = {
                    id: question.id,    // 试题编号
                    type: question.type, // 试题题型
                    xd: question.xd,    // 试题学段 
                    xk: question.xk,     // 试题学科
                    order: max_order+1
                }; 
                that.serialize();
            });
            that.subscribe('Question:move', function (questionObj) {
                that.wireIframe.move(questionObj, that);
            });
            that.subscribe('Question:remove', function (question) {
                that.unserialize();
                that.model = _.without(that.model, question.id);
                if (that.cacheObj[question.id]) delete that.cacheObj[question.id];
                that.serialize();                
            });
        },
        getPosition: function () {
            var offset = this.$el.offset();
            var w = this.$el.width();
            var h = this.$el.height();
            return { left: offset.left +  w, top: offset.top };
        },

        // 序列化数据，并存储到客户端
        serialize: function () {
//            OT2.LocalData.remove('basket_cacheObj_v2');
            OT2.Util.setBasketCacheObj((this.cacheObj));
            this.render();
        },
        // 反序列化数据，提取数据
        unserialize: function () {
            var self = this;
            this.cacheObj = {};
            try {
                this.cacheObj = OT2.Util.getBasketCacheObj() || {};
            }
            catch (e) {

            }
            this.model = [];
            _.each(this.cacheObj, function (v) {
                self.model.push(v.id);
            });
        },

        // 渲染试题统计结果
        render_old: function () {
            this.$list.empty();
            var data = {};
            var _num = 0;
            for (var i = 0, id; id = this.model[i++];) {
                var attr = this.cacheObj[id];
                if (!attr) continue;
                if (typeof OT2.xd_chid !== 'undefined') {
                    if (attr.xk != OT2.xd_chid.chid || attr.xd != OT2.xd_chid.xd) {
                        continue;
                    }
                }
                var key = attr.type; // 获取题型
                if (typeof data[ key ] === 'undefined') data[ key ] = [ id ];
                else data[key].push(id);
                _num++;
            }
            //console.log(data,this.getLenght(this.cacheObj));
            var params = null;
            var _data = _.map(data, function (v, k) {
                return { key: k, val: v, id: 1000 };
            });
            if (typeof PARAMS !== 'undefined' && PARAMS.question_types) {
                var _arr = _.invert(PARAMS.question_types); // 根据学科题型ID号进行排序
                _data = _.map(data, function (v, k) {
                var _id = _arr[k] ? Number(_arr[k]) : 1000;
                    return { key: k, val: v, id: _id };
                });
                _data = _data.sort(function (a, b) { 
                    return a.id - b.id;
                });
            }
            this.$list.append(template({
                // num: this.getLenght(this.cacheObj),
                num: _num,
                list: _data
            }));
                
        },
        render: function() {
            
            var data = [];
            var _num = 0;
            for (var i = 0, id; id = this.model[i++];) {
                var attr = this.cacheObj[id];
                if (!attr) continue;
                if (typeof OT2.xd_chid !== 'undefined') {
                    if (attr.xk != OT2.xd_chid.chid || attr.xd != OT2.xd_chid.xd) {
                        continue;
                    }
                }
                data.push(attr);
                _num++;
            }
            
            try {
                data = _.sortBy(data, 'order2'); // 按order2排序
                var types = _.uniq(_.pluck(data, 'type'));
//                var paperkey = ['paper2016', OT2.xd_chid.xd, OT2.xd_chid.chid].join(':');
//                var hasPaperTmpCache = JSON3.parse(OT2.LocalData.get(paperkey));
                var list = _.groupBy(data, 'type');
                var _data = _.map(types, function(type) {
                    return {
                        key: type,
                        val: _.pluck(list[type], 'id')
                    }
                });
                
            }
            catch(e) {
                // 按默认题型排序
                data = _.sortBy(data, 'order'); // 按添加顺序排序 20180105
                var _data = _.map(PARAMS.sortQuestionTypes, function(item) {
                    var name = item.name;
                    return {
                        key: name,
                        val: _.chain(data).filter(function(q) {
                                return q.type == name;
                            }).pluck('id').value()
                    }
                });
                _data = _.filter(_data, function(item) {
                    return _.size(item.val);
                });
            }
    



            this.$list.html(template({
                num: _num,
                list: _data
            }));

        },
        getLenght: function (jsonData){ var jsonLength = 0; for(var item in jsonData){ jsonLength++; } return jsonLength; },
        // 删除单个题型的所有试题
        removeAll: function (type) {
            var self = this;
            var ids = [].slice.call(arguments, 1);
            var d = dialog({
                title: '友情提示',
                content: '你确定要删除"' + type + '"吗?',
                padding: 20,
                okValue: '确定',
                cancelValue: '取消',
                ok: function () { 
                    // 数据类型问题,请注意!!!
                    _ids = _.map(ids, function (_id) { 
                        return _id + '';
                    });
                    self.model = _.difference(self.model, ids);
                    self.model = _.difference(self.model, _ids);
                    for (var i = 0, id; id = ids[i++];) {
                        self.publish('remove:byid', id);
                        delete self.cacheObj[id];
                    }
                    self.deleteQtypeWithXdXk(type);
                    self.serialize();
                },
                cancel: function () { 
                    this.close();
                }
            });
            d.showModal();

        },
        addAll: function (questionlist) {
            var self = this;
            self.unserialize();
            var _orders = _.pluck(self.cacheObj, 'order');
            var max_order = _.size(_orders) ? Number(_.max(_orders)) : 0;
            for (var i = 0, item; item = questionlist[i++]; ) {
                if (_.contains(self.model, item.model.id)) continue;
                if (typeof OT2.xd_chid !== 'undefined') {
                    var len = _.filter(self.cacheObj, function (item) {
                        return item.xk == OT2.xd_chid.chid && item.xd == OT2.xd_chid.xd;
                    }).length;
                } else {
                    var len = self.model.length;
                }
                if (typeof USER.basketLimit === 'undefined') USER.basketLimit = 30;
                if(len>=USER.basketLimit){
                    var mess = '抱歉，您的试题篮最多可选'+USER.basketLimit+'道试题';
                    if(!USER.isVip && USER.school_permit_id == 0){
                        mess +='</br><span style="color:#666666;font-size:12px">vip用户可选50道试题，<a href="/payment/vip" target="_blank" class="notice-pjq">开通vip</a><span>';
                    }
                    OT2.Util.alert(mess,1);
                    break;
                } else {
                    self.publish('add:byid', item.model.id);
                    self.cacheObj[item.model.id] = {
                        id: item.model.id,    // 试题编号
                        type: item.model.type, // 试题题型
                        xd: item.model.xd,    // 试题学段 
                        xk: item.model.xk,     // 试题学科
                        order: max_order+1 // 排序
                    }; 
                }
            }
            self.model = _.chain(self.cacheObj).sortBy('order').map(function(v) {
                return v.id;
            }).value();
            self.serialize();
        },
        // 清空对应试卷下的题型缓存
        deleteQtypeWithXdXk: function (qtype) {
            var paper_key = '';
            if (typeof OT2.xd_chid !== 'undefined') {
                var xd = OT2.xd_chid.xd;
                var xk = OT2.xd_chid.chid;
                var paper_key = ['paper2016', xd, xk].join(':');
                var str = OT2.LocalData.get(paper_key); // get 
                if (!str || str.length == 0) return false;
                var o = {};
                try {
                    o = JSON3.parse(str) || {};
                }
                catch (e) {

                }
                if (typeof o.types !== 'undefined' && typeof o.types[qtype] !== 'undefined') {
                    delete o.types[qtype];
                    OT2.LocalData.set(paper_key, JSON3.stringify(o)); // set
                }    
            }

        }
    };
    _.extend(Basket.prototype, OT2.Event.prototype);


    return Basket;

})();



/**
 * 试题动画线框 
 *
 */
OT2.Wireiframe = (function () {
    var _instance = null;
    return function () {
        if (!_instance) {
            _instance = {
                $el: $('<div>'),
                init: function () {
                    this.$el.css({ 'position': 'absolute', 'display': 'none'});
                    this.$el.appendTo(document.body);
                },
                // 试题线框移动动画
                move: function (question, basket) {
                    var e1 = question.$el;
                    var pos = e1.position();
                    var w = e1.width();
                    var h = e1.height();
                    this.$el.css({ width: w, height: h, left: pos.left, top: pos.top, opacity: 1 });
                    this.$el.show();
                    var style = basket.getPosition();
                    // style.opacity = 0.1;
                    style.width = 0;
                    style.height = 0;
                    this.$el.append(e1.clone(false));
                    var x = Math.abs(style.left - pos.left);
                    var y = Math.abs(style.top - pos.top);
                    var seconds = Math.sqrt(x * x + y * y)/2.5;
                    this.$el.animate(style, seconds, function () {
                        $(this).empty();
                        $(this).hide();
                    });
                }
            };
        }
        _instance.init();
        return _instance;
    }
})();


/**
 * 独立试题类 - 选择试题
 *
 */
OT2.Question = (function () {
    // 获取试题模板
    var template = _.template(OT2.Util.Template().get('question-item')); 
    
    var template_point = _.template(OT2.Util.Template().get('exam-point')); 
    var template_answer = _.template(OT2.Util.Template().get('exam-answer')); 
    var template_explanation = _.template(OT2.Util.Template().get('exam-explanation')); 
    var exan_temp = _.template(OT2.Util.Template().get('exan-temp')); 



    var Klass = function (data, basket) {
        this.basket = basket; // 注入试题篮实例
        this.model = { added: false }; // 试题是否添加到试题篮
        if (typeof data.added !== 'undefined') this.model.added = data.added;
        _.extend(this.model, data); // 添加
        this.$el = null; 
        this.$addBtn = null;
        this.visibled_analyticbox = false;
        this.rendered_analyticbox = false;
        
    };
    Klass.prototype = {
        render: function ($el) {
            var self = this;
            if ($el) {
                this.$el = $el;
                this.basket.subscribe('question:width', function () {
                    self.$el.find('.exam-s').each(function () {
                        OT2.Util.calcItemWidth($(this));
                    });
                });
            }
            else {
                var $ee = $(template(this.model));
                var q = new OT2.QuestionTxt(this.model, this.basket);
                q.render();
                $ee.find('.exam-head').after(q.$el);
                this.$el = $ee;
            }
            this.cacheElements();
            this.bindEvent();
            return this;
        },
        // 显示与关闭答案与解析, state: true | false
        show_analyticbox: function () {
            var self = this;
            var _user = typeof USER === 'undefined' ? { uid: null } : USER;
            // !!!  如果 php直接渲染了html， 或者已经点击渲染过html 
            if (this.rendered_analyticbox === false && this.visibled_analyticbox === true) {
                // 默认不显示答案与解析
                this.rendered_analyticbox = true; 
                // 还未渲染过html
                this.$el.find('.exam-foot').before('<div class="analyticbox-brick"></div>');
                var htm = template_point({ q: this.model, user: _user });
                this.$el.find('.analyticbox-brick').append(htm);
                if (this.model.question_type == '7') {
                    
                    htm = _.map(this.model.list, function (m, k) {
                        return template_answer({ q: m, user: _user });
                    });
                    this.$el.find('.exam-qlist > .exam-con').each(function (k, v) { 
                        $(this).after(htm[k]);
                    });
                }
                else {
                    this.$el.find('.analyticbox-brick').addClass('analyticbox-brick-normal');
                    htm = template_answer({ q: this.model, user: _user });
                    this.$el.find('.analyticbox-brick').append(htm);
                }
                htm = template_explanation({ q: this.model, user: _user });
                this.$el.find('.analyticbox-brick').append(htm);
                this.$el.addClass(this.model.explanation ? 'beauty-man' : 'uglify-man' );
            }
            this.$el[ this.visibled_analyticbox ?  'addClass'  :  'removeClass']('visible-ake');
            this.$el.find('.analyticbox, .analyticbox-brick')[ this.visibled_analyticbox ? 'show' : 'hide']();            
            
            
        },
        cacheElements: function () {
            this.$addBtn = this.$el.find('.J_AddQuestion');            
        },
        addToBasket: function () { 
                this.model.added = true;
                this.$addBtn.html('<b>-</b>移除');
                this.$addBtn.addClass('removebtn');
                this.$addBtn.removeClass('addbtn');

        },
        removeFromBasket: function () { 
                this.model.added = false;
                this.$addBtn.html('<b>+</b>选题');
                this.$addBtn.removeClass('removebtn');
                this.$addBtn.addClass('addbtn');

        },
        // 试题篮添加或删除试题
        addOrRemove: function (act) { 
            if (this.model.added && (!act || typeof act === 'undefined')) {
                this.removeFromBasket();
                this.basket.publish('Question:remove', this.model);
            }
            else {
                var len = this.countQnumsByChid();              
                if (typeof USER.basketLimit === 'undefined') USER.basketLimit = 30;
                // if(this.basket.model.length>USER.basketLimit){
                if(len>=USER.basketLimit){
                    var mess = '抱歉，您的试题篮最多可选'+USER.basketLimit+'道试题';
                    if(!USER.isVip && USER.school_permit_id == 0){
                        mess +='</br><span style="color:#666666;font-size:12px">vip用户可选50道试题，<a href="/payment/vip" target="_blank" class="notice-pjq">开通vip</a><span>';
                    }
                    OT2.Util.alert(mess,1);
                    return false;
                }
                this.addToBasket();
                this.basket.publish('Question:add', this.model);
                this.basket.publish('Question:move', this);
            }
        },
        countQnumsByChid: function () { 
            if (typeof OT2.xd_chid !== 'undefined') {
                return _.filter(this.basket.cacheObj, function (item) {
                    return item.xk == OT2.xd_chid.chid && item.xd == OT2.xd_chid.xd;
                }).length;
            }
            return this.basket.model.length;
        },
        bindEvent: function () {
            var self = this;
            this.$addBtn.on('click', function () {
                if(typeof USER.uid === 'undefined'){
                   <！-- return OT2.Global.initLogin();-->
                    self.addOrRemove();
                }
                self.addOrRemove();
            });     

            this.basket.subscribe('remove:byid', function (id) { 
                if (id != self.model.id) return false;
                self.basket.model = _.without(self.basket.model, id);
                self.basket.model = _.without(self.basket.model, '' + id);
                self.removeFromBasket();
            });
            this.basket.subscribe('add:byid', function (id) { 
                if (id != self.model.id) return false;
                self.addToBasket();
            });
            this.$el.find('.search-exam').children('.exam-con').on('click', function (evt) {
                self.visibled_analyticbox = !self.visibled_analyticbox;
                self.show_analyticbox();
            });
//            this.$el.find('.search-exam').find('.click-jiexi').on('click', function (evt) {
//                self.visibled_analyticbox = !self.visibled_analyticbox;
//                self.show_analyticbox();
//            });
            this.basket.subscribe('show-analyticbox', function (state) {
                self.visibled_analyticbox = state;
                self.show_analyticbox();
            });

        }
    };

    return Klass;
})();



