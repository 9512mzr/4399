/**
 * 表单注册验证字段
 *
 */
var FormCheckField = function (el, option) {
    this.el = el;
    this.$el = $(el);
    this.errorMsg = null;
    this.asyncMsg = null;
    this.handlers = [];
    this.name = this.$el.attr('name');
    
};
$.extend(FormCheckField.prototype, {
    // 客户端验证
    onCheck: function (evtName, cb) {
        var self = this;
        var args = [].slice.call(arguments, 2); // 获取其余参数
        var _handler = function () {
            var _opt = [ self.getVal() ].concat(args).concat([].slice.call(arguments, 0));
            var error = cb.apply(self, _opt);
            if (error) {
                self.errorMsg = error;
                self.showError(error);
            }
            else {
                self.errorMsg = null;
                self.clearError();
            }
            return self.errorMsg;
        };
        this.handlers.push(_handler);
        this.$el.on(evtName, _handler);
    },
    // 远程服务端验证
    onPromiseCheck: function (evtName, cb) {
        var self = this;
        var args = [].slice.call(arguments, 2);
        var _handler = function () {
            self.asyncMsg = null; // 清除错误信息 !!!
            if (self.errorMsg) return; // 如果有错误不进行服务端验证 !!!
            var _opt = [ self.getVal() ].concat(args).concat( [].slice.call(arguments, 0) );
            var _promise = cb.apply(self, _opt); // 返回一个Promise
            _promise
                .done(function (res) {
                    if (res.errcode == 0) {
                        self.asyncMsg = null;
                        if (!self.errorMsg) self.clearError();
                    }
                })
                .fail(function (res) {
                    self.asyncMsg = res.message;
                    self.showError(res.message);
                });
        };
        this.$el.on(evtName, _handler);
    },
    doCheck: function () {
        if (this.errorMsg) return this.errorMsg;
        if (this.asyncMsg) {
            this.showError(this.asyncMsg);
            return this.asyncMsg;
        }

        for (var i = 0, handler; handler = this.handlers[i++];) {
            var error = handler();
            if (error) {
                return error;
            }
        }
        return null;
    },
    showError: function (msg) {
        if (typeof this.$t === 'undefined') {
            this.$t = $('<span class="error-msg"></span>');
            this.$el.after(this.$t);
        }
        this.$t.html(msg).show();
    },
    clearError: function () {
        if (typeof this.$t != 'undefined') {
            this.errorMsg = null;
            this.$t.html('').hide();
        }
    },
    getVal: function () {
        return $.trim(this.el.value);
    }
});

// 常见验证规则
var Validate = {
    mobile: function (val) {
        return /^(13[0-9]|15[0-9]|19[0-9]|18[0-9]|14[0-9]|17[0-9])\d{8}$/.test(val);
    },
    email: function (val) {
        return /^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/.test(val);
    },
    notEmpty: function (val) {
        return $.trim(val + '').length > 0;
    },
    checkCode: function (val, type) {
        // 手机验证,邮箱验证，服务端验证
        var dtd = $.Deferred();
        $.get('/site/check-code', { scode: val, type: type }, 'json')
            .done(function (res) {
                if (res.errcode) dtd.reject(res);
                else dtd.resolve(res);
            })
            .fail(function () {
                dtd.reject({ errcode: 'X501', message: '异常，手机验证失败！' });
            });
        return dtd.promise();
    },
    // 账号检测
    checkAccount: function (v, type) { 
        var dtd = $.Deferred();
        var t = new Date().getTime();
        $.get('/site/check-account', { val: v, type: type, t: t }, 'json')
            .done(function (res) {
                if (res.errcode) dtd.reject(res);
                else dtd.resolve(res);
            })
            .fail(function () {
                dtd.reject({errcode: 'X500', message: '异常，服务异常'});
            });
        return dtd.promise();
    }
};


/**
 * 注册通用表单
 *
 */
var CommonForm = function ($el) {
    this.$el = $el;
    this.checkFields = []; // 验证字段
    this.cache = {};
    this.sended = false; // 验证码是否获取成功
};
$.extend(CommonForm.prototype, {
    init: function () {
        this.initCheckField();
        this.events();
        return this;
    },
    events: function () { },

    initCheckField: function () { },
    addCheckField: function (input) {
        var _Field = new FormCheckField(input);
        this.checkFields.push(_Field);
        this.cache[_Field.name] = _Field;
        return _Field;
    },
    checkForm: function () {
        var self = this;
        var errors = [];
        $.each(this.checkFields, function (i, _Field) {
            var error = _Field.doCheck();
            if (error) errors.push(error);
        });
        if (errors.length > 0) return false;
        return true;
    },
    attachPasswordCheck: function (input, name) {
        var self = this;
        var password = self.addCheckField(input);
        password.onCheck('blur', function (v, that) {
            if (v.length < 6) return '请输入至少6位长度的密码';
            var _Field = $.grep(self.checkFields, function (n) { 
                return n.name == name;
            })[0];
            if (!_Field) return;
            var v2 = _Field.getVal();
            if (v2 && v2 != v) return '密码不一致';
            else if (v2 && v2 == v) {
                password.clearError();
                _Field.clearError();
            }
        });
        return password;
    },
    attachEmailCheck: function (input) { 
        var self = this;
        var _Field = self.addCheckField(input);
        _Field.onCheck('blur', function (v) {
            if (!Validate.notEmpty(v)) return '请输入邮箱';
            if (!Validate.email(v)) return '你输入的邮箱格式不正确'
        });
        return _Field;
    },
    attachMobileCheck1: function (input) {
        var self = this;
        var _Field = this.addCheckField(input);
        _Field.onCheck('blur', function (v) {
            if (!Validate.notEmpty(v)) return '请输入手机号码';
            if (!Validate.mobile(v)) return '你输入的手机号码不正确';
                $.get('/site/check-account', { val: v, type:'mobile'}, 'json')
                .done(function(res){
                    if(res.errcode){
                        $('#mobile').after('<span class="error-msg" style="display:block;">'+res.message+'</span>');
                        $('.get-code').on('click',function(){
                            return false
                        });
                    }else{
                        $('.error-msg').html(' ');
                        $('.get-code').unbind('click');
                    }
                });  

        });
        return _Field;
    },
    validateMobile: function (input) {
        var self = this;
            $.get('/site/validate-mobile',{},'json')
                .done(function(res){
                    if(res.errcode){
                        $('#mobile').after('<span class="error-msg" style="display:block;">'+res.message+'</span>');
                        $('.get-code').on('click',function(){
                            return false
                        });
                    }else{
                        if(res.data.length>=2){
                            $('#show_user .sel-radio').empty();
                            $('#show_user').css('display','block');
                            _.each(res.data,function (v) {
                                $('#show_user .sel-radio').append('<input type="radio" name="uid" value='+v.uid+'>'+v.username);
                            });
                        }else{
                            $('#show_user').css('display','none');
                        }
                        $('.error-msg').html(' ');
                        $('.get-code').unbind('click');
                    }
                });
    },
    attachMobileCheck: function (input) {
        var self = this;
        var _Field = this.addCheckField(input);
        _Field.onCheck('blur', function (v) {
            if (!Validate.notEmpty(v)) return '请输入手机号码';
            if (!Validate.mobile(v)) return '你输入的手机号码不正确';
        });
        return _Field;
    },
    attachScodeCheck: function (input) {
        var self = this;
        var _Field = this.addCheckField(input);
        _Field.onCheck('blur', function (v) {
            if (v.length != 4) return '请输入正确的验证码';
        });
//        _Field.onPromiseCheck('blur', function (v) {
//            if (!self.sended && !_Field.errorMsg) {
//                return $.Deferred().reject({errcode: 'X250', message: '请点击获取验证码'});
//            }
//            return Validate.checkCode(v, 'email');
//        });
        return _Field;
    },
    refreshCaptcha: function () {
             $.get('/site/captcha', { 'refresh': 1 }, function (data) {
                 $('#mobile-captcha').attr('src',data.url);
             });
        },
    showError: function (msg) {
    if (typeof this.$t === 'undefined') {
        this.$t = $('<span class="error-msg"></span>');
        $('#verifyCode').after(this.$t);
    }
        this.$t.html(msg).show();
    },
    // 获取验证码
    getCode: function (type, btn) {
        var self = this;
        btn = btn || 'a.get-code';
        var wait_checkcode = false; // 等待验证码失效
        this.$el.on('click', btn, function (evt) {
            evt.preventDefault();
            var $el = $(this);
            type = type || $(this).data('type');
            var error = self.cache[type].doCheck();
            if (error) return false;
            if (wait_checkcode) return false; // 验证码失效后，才可以重新获取
            var data = {};
            data['account'] = self.cache[type].getVal();
            data['type'] = type;
            //获取图形验证码 leishao 2017-05-31
            data['verifyCode'] = $('#verifyCode').val();
            wait_checkcode = true;
            $el.html('正在发送...');
            $.get(this.href, data, 'json')
                .done(function (res) {
                    if(res.errcode==1){
                        self.refreshCaptcha();
                        self.showError(res.message);
                        $el.html('获取验证码');
                        wait_checkcode = false;
                        return false;
                    }
                    self.sended = true; // 验证码获取成功
                    var seconds = 60;
                    var start = function () {
                        seconds--;
                        if (seconds == 0) {
                            wait_checkcode = false;
                            if (_t) clearInterval(_t);
                            $el.html('获取验证码');
                            return;
                        }
                        $el.html('<strong>' + seconds + '</strong>秒后重新获取');
                    };
                    start();
                    var _t = setInterval(start, 1000);
                })
                .fail(function () {
                    $el.html('获取验证码');
                    wait_checkcode = false;
                    alert('验证码获取失败，请重新获取!');
                });
            return false;
        });
    }
});